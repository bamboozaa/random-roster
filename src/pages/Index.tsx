import { useState } from "react";
import ParticipantForm from "@/components/ParticipantForm";
import ParticipantList from "@/components/ParticipantList";
import DrawButton from "@/components/DrawButton";
import GroupResults from "@/components/GroupResults";
import SummaryTable from "@/components/SummaryTable";
import ExportButton from "@/components/ExportButton";
import ImportExcelButton from "@/components/ImportExcelButton";
import { Button } from "@/components/ui/button";
import { drawGroups } from "@/lib/lotteryUtils";
import { generateSampleParticipants } from "@/lib/sampleData";
import { toast } from "@/hooks/use-toast";
import { Dices, Users } from "lucide-react";

interface Participant {
  id: number;
  name: string;
  gender: string;
  age: number;
}

interface GroupStats {
  total: number;
  ‡∏ä‡∏≤‡∏¢: number;
  ‡∏´‡∏ç‡∏¥‡∏á: number;
  "‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤20": number;
  "20-29": number;
  "30-39": number;
  "40+": number;
}

interface DrawResult {
  groups: Record<string, Participant[]>;
  summary: Record<string, GroupStats>;
}

const Index = () => {
  const groupNames = [
    "‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ó‡∏¥‡∏®‡πÄ‡∏´‡∏ô‡∏∑‡∏≠ (‡∏≠‡∏∏‡∏î‡∏£)",
    "‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ó‡∏¥‡∏®‡πÉ‡∏ï‡πâ (‡∏ó‡∏±‡∏Å‡∏©‡∏¥‡∏ì)",
    "‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ó‡∏¥‡∏®‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏≠‡∏≠‡∏Å (‡∏ö‡∏π‡∏£‡∏û‡∏≤)",
    "‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ó‡∏¥‡∏®‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏ï‡∏Å (‡∏õ‡∏£‡∏∞‡∏à‡∏¥‡∏°)"
  ];

  const [participants, setParticipants] = useState<Participant[]>([]);
  const [groups, setGroups] = useState<DrawResult | null>(null);
  const [loading, setLoading] = useState(false);
  const [nextId, setNextId] = useState(1);

  const handleAddParticipant = (participant: Omit<Participant, "id">) => {
    setParticipants([...participants, { ...participant, id: nextId }]);
    setNextId(nextId + 1);
    toast({
      title: "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
      description: `‡πÄ‡∏û‡∏¥‡πà‡∏° ${participant.name} ‡πÅ‡∏•‡πâ‡∏ß`,
    });
  };

  const handleDeleteParticipant = (id: number) => {
    setParticipants(participants.filter((p) => p.id !== id));
    setGroups(null);
    toast({
      title: "‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡πÅ‡∏•‡πâ‡∏ß",
      variant: "destructive",
    });
  };

  const handleImportParticipants = (importedParticipants: Omit<Participant, "id">[]) => {
    const newParticipants = importedParticipants.map((p, index) => ({
      ...p,
      id: nextId + index,
    }));
    setParticipants([...participants, ...newParticipants]);
    setNextId(nextId + importedParticipants.length);
    setGroups(null);
  };

  const handleLoadSampleData = () => {
    const sampleData = generateSampleParticipants(100);
    const newParticipants = sampleData.map((p, index) => ({
      ...p,
      id: nextId + index,
    }));
    setParticipants(newParticipants);
    setNextId(nextId + 100);
    setGroups(null);
    toast({
      title: "‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
      description: "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á 100 ‡∏Ñ‡∏ô‡πÅ‡∏•‡πâ‡∏ß",
    });
  };

  const handleDraw = async () => {
    if (participants.length < 4) {
      toast({
        title: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏±‡∏ö‡∏™‡∏•‡∏≤‡∏Å‡πÑ‡∏î‡πâ",
        description: "‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 4 ‡∏Ñ‡∏ô",
        variant: "destructive",
      });
      return;
    }

    setLoading(true);
    setGroups(null);

    // Simulate loading for better UX
    setTimeout(() => {
      try {
        const result = drawGroups(participants, groupNames);
        setGroups(result);
        toast({
          title: "‡∏à‡∏±‡∏ö‡∏™‡∏•‡∏≤‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! üéâ",
          description: "‡πÅ‡∏ö‡πà‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô",
        });
      } catch (error) {
        toast({
          title: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
          description: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏±‡∏ö‡∏™‡∏•‡∏≤‡∏Å‡πÑ‡∏î‡πâ",
          variant: "destructive",
        });
      } finally {
        setLoading(false);
      }
    }, 1500);
  };

  const handleReDraw = async () => {
    setLoading(true);
    setGroups(null);

    setTimeout(() => {
      try {
        const result = drawGroups(participants, groupNames);
        setGroups(result);
        toast({
          title: "‡∏à‡∏±‡∏ö‡∏™‡∏•‡∏≤‡∏Å‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! üé≤",
          description: "‡πÑ‡∏î‡πâ‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡πâ‡∏ß",
        });
      } catch (error) {
        toast({
          title: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
          description: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏±‡∏ö‡∏™‡∏•‡∏≤‡∏Å‡πÑ‡∏î‡πâ",
          variant: "destructive",
        });
      } finally {
        setLoading(false);
      }
    }, 1500);
  };

  return (
    <div className="min-h-screen py-8 px-4">
      <div className="max-w-7xl mx-auto space-y-8">
        {/* Header */}
        <div className="text-center space-y-4">
          <div className="flex items-center justify-center gap-3">
            <Dices className="w-12 h-12 text-primary animate-pulse" />
            <h1 className="text-5xl font-bold bg-gradient-to-r from-primary via-secondary to-accent bg-clip-text text-transparent">
              ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏ö‡∏™‡∏•‡∏≤‡∏Å‡πÅ‡∏ö‡πà‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°
            </h1>
            <Dices className="w-12 h-12 text-secondary animate-pulse" />
          </div>
          <p className="text-xl text-muted-foreground">
            ‡∏à‡∏±‡∏ö‡∏™‡∏•‡∏≤‡∏Å‡πÅ‡∏ö‡πà‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏¢‡∏∏‡∏ï‡∏¥‡∏ò‡∏£‡∏£‡∏° ‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß ‡πÅ‡∏•‡∏∞‡∏™‡∏ô‡∏∏‡∏Å‡∏™‡∏ô‡∏≤‡∏ô!
          </p>
        </div>

        {/* Add Participant Form */}
        <div className="space-y-4">
          <ParticipantForm onAdd={handleAddParticipant} />
          <div className="flex justify-center gap-3">
            <ImportExcelButton onImport={handleImportParticipants} />
            <Button 
              onClick={handleLoadSampleData} 
              variant="outline" 
              className="gap-2"
            >
              <Users className="w-4 h-4" />
              ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á 100 ‡∏Ñ‡∏ô
            </Button>
          </div>
        </div>

        {/* Participant List */}
        <div className="space-y-4">
          <div className="flex justify-between items-center">
            <h2 className="text-2xl font-bold">‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°</h2>
            <ExportButton 
              participants={participants} 
              groups={groups?.groups} 
              summary={groups?.summary} 
            />
          </div>
          <ParticipantList participants={participants} onDelete={handleDeleteParticipant} />
        </div>

        {/* Draw Button */}
        <DrawButton
          hasGroups={!!groups}
          isLoading={loading}
          onDraw={handleDraw}
          onReDraw={handleReDraw}
          disabled={participants.length < 4}
        />

        {/* Results */}
        {groups && !loading && (
          <div className="space-y-8 animate-ticket">
            <GroupResults groups={groups.groups} />
            <SummaryTable summary={groups.summary} />
          </div>
        )}
      </div>
    </div>
  );
};

export default Index;
