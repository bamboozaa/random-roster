import { Button } from "@/components/ui/button";
import { Upload, FileDown } from "lucide-react";
import * as XLSX from "xlsx";
import { toast } from "@/hooks/use-toast";
import { useRef } from "react";

interface Participant {
  name: string;
  gender: string;
  age: number;
}

interface ImportExcelButtonProps {
  onImport: (participants: Participant[]) => void;
}

const ImportExcelButton = ({ onImport }: ImportExcelButtonProps) => {
  const fileInputRef = useRef<HTMLInputElement>(null);

  const handleDownloadTemplate = () => {
    const template = [
      { ‡∏ä‡∏∑‡πà‡∏≠: "‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á 1", ‡πÄ‡∏û‡∏®: "‡∏ä‡∏≤‡∏¢", ‡∏≠‡∏≤‡∏¢‡∏∏: 25 },
      { ‡∏ä‡∏∑‡πà‡∏≠: "‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á 2", ‡πÄ‡∏û‡∏®: "‡∏´‡∏ç‡∏¥‡∏á", ‡∏≠‡∏≤‡∏¢‡∏∏: 30 },
      { ‡∏ä‡∏∑‡πà‡∏≠: "‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á 3", ‡πÄ‡∏û‡∏®: "‡∏ä‡∏≤‡∏¢", ‡∏≠‡∏≤‡∏¢‡∏∏: 22 },
    ];

    const worksheet = XLSX.utils.json_to_sheet(template);
    const workbook = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(workbook, worksheet, "‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°");

    // ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
    worksheet["!cols"] = [
      { wch: 20 }, // ‡∏ä‡∏∑‡πà‡∏≠
      { wch: 10 }, // ‡πÄ‡∏û‡∏®
      { wch: 10 }, // ‡∏≠‡∏≤‡∏¢‡∏∏
    ];

    XLSX.writeFile(workbook, "template_‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°.xlsx");

    toast({
      title: "‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î Template ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! üì•",
      description: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå Excel ‡πÅ‡∏•‡πâ‡∏ß Import ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤",
    });
  };

  const handleFileUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (!file) return;

    const reader = new FileReader();

    reader.onload = (event) => {
      try {
        const data = new Uint8Array(event.target?.result as ArrayBuffer);
        const workbook = XLSX.read(data, { type: "array" });
        const sheetName = workbook.SheetNames[0];
        const worksheet = workbook.Sheets[sheetName];
        const jsonData = XLSX.utils.sheet_to_json(worksheet) as any[];

        const participants: Participant[] = jsonData
          .map((row) => {
            const name = row["‡∏ä‡∏∑‡πà‡∏≠"] || row["name"];
            const gender = row["‡πÄ‡∏û‡∏®"] || row["gender"];
            const age = row["‡∏≠‡∏≤‡∏¢‡∏∏"] || row["age"];

            if (!name || !gender || !age) {
              return null;
            }

            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏û‡∏®
            if (gender !== "‡∏ä‡∏≤‡∏¢" && gender !== "‡∏´‡∏ç‡∏¥‡∏á") {
              toast({
                title: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á",
                description: `‡πÄ‡∏û‡∏®‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô "‡∏ä‡∏≤‡∏¢" ‡∏´‡∏£‡∏∑‡∏≠ "‡∏´‡∏ç‡∏¥‡∏á" ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô (‡∏û‡∏ö: ${gender})`,
                variant: "destructive",
              });
              return null;
            }

            return {
              name: String(name),
              gender: String(gender),
              age: Number(age),
            };
          })
          .filter((p): p is Participant => p !== null);

        if (participants.length === 0) {
          toast({
            title: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
            description: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå Excel ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì",
            variant: "destructive",
          });
          return;
        }

        onImport(participants);

        toast({
          title: "Import ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‚úÖ",
          description: `‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏° ${participants.length} ‡∏Ñ‡∏ô`,
        });

        // Reset input
        if (fileInputRef.current) {
          fileInputRef.current.value = "";
        }
      } catch (error) {
        toast({
          title: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
          description: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå Excel ‡πÑ‡∏î‡πâ",
          variant: "destructive",
        });
      }
    };

    reader.readAsArrayBuffer(file);
  };

  const handleImportClick = () => {
    fileInputRef.current?.click();
  };

  return (
    <div className="flex gap-2">
      <input
        ref={fileInputRef}
        type="file"
        accept=".xlsx,.xls"
        onChange={handleFileUpload}
        className="hidden"
      />
      
      <Button
        onClick={handleDownloadTemplate}
        variant="outline"
        className="gap-2"
      >
        <FileDown className="w-4 h-4" />
        Template
      </Button>

      <Button
        onClick={handleImportClick}
        variant="secondary"
        className="gap-2"
      >
        <Upload className="w-4 h-4" />
        Import Excel
      </Button>
    </div>
  );
};

export default ImportExcelButton;
