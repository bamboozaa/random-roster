import { Button } from "@/components/ui/button";
import { Download } from "lucide-react";
import * as XLSX from "xlsx";
import { toast } from "@/hooks/use-toast";

interface Participant {
  id: number;
  name: string;
  gender: string;
  age: number;
}

interface GroupStats {
  total: number;
  ‡∏ä‡∏≤‡∏¢: number;
  ‡∏´‡∏ç‡∏¥‡∏á: number;
  "‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤20": number;
  "20-29": number;
  "30-39": number;
  "40+": number;
}

interface ExportButtonProps {
  participants: Participant[];
  groups?: Record<string, Participant[]> | null;
  summary?: Record<string, GroupStats> | null;
}

const ExportButton = ({ participants, groups, summary }: ExportButtonProps) => {
  const handleExport = () => {
    if (participants.length === 0) {
      toast({
        title: "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
        description: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏Å‡πà‡∏≠‡∏ô",
        variant: "destructive",
      });
      return;
    }

    const workbook = XLSX.utils.book_new();

    // Sheet 1: ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const participantsData = participants.map((p, index) => ({
      ‡∏•‡∏≥‡∏î‡∏±‡∏ö: index + 1,
      ‡∏ä‡∏∑‡πà‡∏≠: p.name,
      ‡πÄ‡∏û‡∏®: p.gender,
      ‡∏≠‡∏≤‡∏¢‡∏∏: p.age,
    }));
    const ws1 = XLSX.utils.json_to_sheet(participantsData);
    XLSX.utils.book_append_sheet(workbook, ws1, "‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î");

    // Sheet 2: ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏™‡∏•‡∏≤‡∏Å (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    if (groups && summary) {
      const groupsData: any[] = [];
      Object.entries(groups).forEach(([groupName, members]) => {
        members.forEach((member, index) => {
          groupsData.push({
            ‡∏Å‡∏•‡∏∏‡πà‡∏°: groupName,
            ‡∏•‡∏≥‡∏î‡∏±‡∏ö: index + 1,
            ‡∏ä‡∏∑‡πà‡∏≠: member.name,
            ‡πÄ‡∏û‡∏®: member.gender,
            ‡∏≠‡∏≤‡∏¢‡∏∏: member.age,
          });
        });
      });
      const ws2 = XLSX.utils.json_to_sheet(groupsData);
      XLSX.utils.book_append_sheet(workbook, ws2, "‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏™‡∏•‡∏≤‡∏Å");

      // Sheet 3: ‡∏™‡∏£‡∏∏‡∏õ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏î‡∏∏‡∏•
      const summaryData = Object.entries(summary).map(([groupName, stats]) => ({
        ‡∏Å‡∏•‡∏∏‡πà‡∏°: groupName,
        ‡∏£‡∏ß‡∏°: stats.total,
        ‡∏ä‡∏≤‡∏¢: stats.‡∏ä‡∏≤‡∏¢,
        ‡∏´‡∏ç‡∏¥‡∏á: stats.‡∏´‡∏ç‡∏¥‡∏á,
        "‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤20": stats["‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤20"],
        "20-29": stats["20-29"],
        "30-39": stats["30-39"],
        "40+": stats["40+"],
      }));
      const ws3 = XLSX.utils.json_to_sheet(summaryData);
      XLSX.utils.book_append_sheet(workbook, ws3, "‡∏™‡∏£‡∏∏‡∏õ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏î‡∏∏‡∏•");
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏î‡πâ‡∏ß‡∏¢‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤
    const date = new Date();
    const fileName = `‡∏à‡∏±‡∏ö‡∏™‡∏•‡∏≤‡∏Å‡πÅ‡∏ö‡πà‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°_${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, "0")}-${String(date.getDate()).padStart(2, "0")}_${String(date.getHours()).padStart(2, "0")}-${String(date.getMinutes()).padStart(2, "0")}.xlsx`;

    // Export
    XLSX.writeFile(workbook, fileName);

    toast({
      title: "‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! üìä",
      description: `‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå ${fileName} ‡πÅ‡∏•‡πâ‡∏ß`,
    });
  };

  return (
    <Button
      onClick={handleExport}
      variant="outline"
      className="gap-2"
      disabled={participants.length === 0}
    >
      <Download className="w-4 h-4" />
      ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å Excel
    </Button>
  );
};

export default ExportButton;
